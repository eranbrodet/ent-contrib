// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package scoresv2

import (
	"entgo.io/contrib/entgql/internal/todo/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldLTE(FieldID, id))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldEQ(FieldScore, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int) predicate.ScoresV2 {
	return predicate.ScoresV2(sql.FieldLTE(FieldScore, v))
}

// HasScores applies the HasEdge predicate on the "Scores" edge.
func HasScores() predicate.ScoresV2 {
	return predicate.ScoresV2(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScoresTable, ScoresColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScoresWith applies the HasEdge predicate on the "Scores" edge with a given conditions (other predicates).
func HasScoresWith(preds ...predicate.Scores) predicate.ScoresV2 {
	return predicate.ScoresV2(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScoresInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScoresTable, ScoresColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScoresV2) predicate.ScoresV2 {
	return predicate.ScoresV2(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScoresV2) predicate.ScoresV2 {
	return predicate.ScoresV2(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScoresV2) predicate.ScoresV2 {
	return predicate.ScoresV2(func(s *sql.Selector) {
		p(s.Not())
	})
}
