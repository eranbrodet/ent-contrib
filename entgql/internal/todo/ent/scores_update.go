// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/contrib/entgql/internal/todo/ent/predicate"
	"entgo.io/contrib/entgql/internal/todo/ent/scores"
	"entgo.io/contrib/entgql/internal/todo/ent/scoresv1"
	"entgo.io/contrib/entgql/internal/todo/ent/scoresv2"
	"entgo.io/contrib/entgql/internal/todo/ent/todo"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScoresUpdate is the builder for updating Scores entities.
type ScoresUpdate struct {
	config
	hooks    []Hook
	mutation *ScoresMutation
}

// Where appends a list predicates to the ScoresUpdate builder.
func (su *ScoresUpdate) Where(ps ...predicate.Scores) *ScoresUpdate {
	su.mutation.Where(ps...)
	return su
}

// AddTodoIDs adds the "todo" edge to the Todo entity by IDs.
func (su *ScoresUpdate) AddTodoIDs(ids ...int) *ScoresUpdate {
	su.mutation.AddTodoIDs(ids...)
	return su
}

// AddTodo adds the "todo" edges to the Todo entity.
func (su *ScoresUpdate) AddTodo(t ...*Todo) *ScoresUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTodoIDs(ids...)
}

// SetScoresV1ID sets the "ScoresV1" edge to the ScoresV1 entity by ID.
func (su *ScoresUpdate) SetScoresV1ID(id int) *ScoresUpdate {
	su.mutation.SetScoresV1ID(id)
	return su
}

// SetNillableScoresV1ID sets the "ScoresV1" edge to the ScoresV1 entity by ID if the given value is not nil.
func (su *ScoresUpdate) SetNillableScoresV1ID(id *int) *ScoresUpdate {
	if id != nil {
		su = su.SetScoresV1ID(*id)
	}
	return su
}

// SetScoresV1 sets the "ScoresV1" edge to the ScoresV1 entity.
func (su *ScoresUpdate) SetScoresV1(s *ScoresV1) *ScoresUpdate {
	return su.SetScoresV1ID(s.ID)
}

// SetScoresV2ID sets the "ScoresV2" edge to the ScoresV2 entity by ID.
func (su *ScoresUpdate) SetScoresV2ID(id int) *ScoresUpdate {
	su.mutation.SetScoresV2ID(id)
	return su
}

// SetNillableScoresV2ID sets the "ScoresV2" edge to the ScoresV2 entity by ID if the given value is not nil.
func (su *ScoresUpdate) SetNillableScoresV2ID(id *int) *ScoresUpdate {
	if id != nil {
		su = su.SetScoresV2ID(*id)
	}
	return su
}

// SetScoresV2 sets the "ScoresV2" edge to the ScoresV2 entity.
func (su *ScoresUpdate) SetScoresV2(s *ScoresV2) *ScoresUpdate {
	return su.SetScoresV2ID(s.ID)
}

// Mutation returns the ScoresMutation object of the builder.
func (su *ScoresUpdate) Mutation() *ScoresMutation {
	return su.mutation
}

// ClearTodo clears all "todo" edges to the Todo entity.
func (su *ScoresUpdate) ClearTodo() *ScoresUpdate {
	su.mutation.ClearTodo()
	return su
}

// RemoveTodoIDs removes the "todo" edge to Todo entities by IDs.
func (su *ScoresUpdate) RemoveTodoIDs(ids ...int) *ScoresUpdate {
	su.mutation.RemoveTodoIDs(ids...)
	return su
}

// RemoveTodo removes "todo" edges to Todo entities.
func (su *ScoresUpdate) RemoveTodo(t ...*Todo) *ScoresUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTodoIDs(ids...)
}

// ClearScoresV1 clears the "ScoresV1" edge to the ScoresV1 entity.
func (su *ScoresUpdate) ClearScoresV1() *ScoresUpdate {
	su.mutation.ClearScoresV1()
	return su
}

// ClearScoresV2 clears the "ScoresV2" edge to the ScoresV2 entity.
func (su *ScoresUpdate) ClearScoresV2() *ScoresUpdate {
	su.mutation.ClearScoresV2()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScoresUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ScoresMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScoresUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScoresUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScoresUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ScoresUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scores.Table,
			Columns: scores.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scores.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if su.mutation.TodoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scores.TodoTable,
			Columns: []string{scores.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: todo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTodoIDs(); len(nodes) > 0 && !su.mutation.TodoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scores.TodoTable,
			Columns: []string{scores.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: todo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TodoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scores.TodoTable,
			Columns: []string{scores.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: todo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ScoresV1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scores.ScoresV1Table,
			Columns: []string{scores.ScoresV1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scoresv1.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ScoresV1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scores.ScoresV1Table,
			Columns: []string{scores.ScoresV1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scoresv1.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ScoresV2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scores.ScoresV2Table,
			Columns: []string{scores.ScoresV2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scoresv2.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ScoresV2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scores.ScoresV2Table,
			Columns: []string{scores.ScoresV2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scoresv2.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scores.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScoresUpdateOne is the builder for updating a single Scores entity.
type ScoresUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScoresMutation
}

// AddTodoIDs adds the "todo" edge to the Todo entity by IDs.
func (suo *ScoresUpdateOne) AddTodoIDs(ids ...int) *ScoresUpdateOne {
	suo.mutation.AddTodoIDs(ids...)
	return suo
}

// AddTodo adds the "todo" edges to the Todo entity.
func (suo *ScoresUpdateOne) AddTodo(t ...*Todo) *ScoresUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTodoIDs(ids...)
}

// SetScoresV1ID sets the "ScoresV1" edge to the ScoresV1 entity by ID.
func (suo *ScoresUpdateOne) SetScoresV1ID(id int) *ScoresUpdateOne {
	suo.mutation.SetScoresV1ID(id)
	return suo
}

// SetNillableScoresV1ID sets the "ScoresV1" edge to the ScoresV1 entity by ID if the given value is not nil.
func (suo *ScoresUpdateOne) SetNillableScoresV1ID(id *int) *ScoresUpdateOne {
	if id != nil {
		suo = suo.SetScoresV1ID(*id)
	}
	return suo
}

// SetScoresV1 sets the "ScoresV1" edge to the ScoresV1 entity.
func (suo *ScoresUpdateOne) SetScoresV1(s *ScoresV1) *ScoresUpdateOne {
	return suo.SetScoresV1ID(s.ID)
}

// SetScoresV2ID sets the "ScoresV2" edge to the ScoresV2 entity by ID.
func (suo *ScoresUpdateOne) SetScoresV2ID(id int) *ScoresUpdateOne {
	suo.mutation.SetScoresV2ID(id)
	return suo
}

// SetNillableScoresV2ID sets the "ScoresV2" edge to the ScoresV2 entity by ID if the given value is not nil.
func (suo *ScoresUpdateOne) SetNillableScoresV2ID(id *int) *ScoresUpdateOne {
	if id != nil {
		suo = suo.SetScoresV2ID(*id)
	}
	return suo
}

// SetScoresV2 sets the "ScoresV2" edge to the ScoresV2 entity.
func (suo *ScoresUpdateOne) SetScoresV2(s *ScoresV2) *ScoresUpdateOne {
	return suo.SetScoresV2ID(s.ID)
}

// Mutation returns the ScoresMutation object of the builder.
func (suo *ScoresUpdateOne) Mutation() *ScoresMutation {
	return suo.mutation
}

// ClearTodo clears all "todo" edges to the Todo entity.
func (suo *ScoresUpdateOne) ClearTodo() *ScoresUpdateOne {
	suo.mutation.ClearTodo()
	return suo
}

// RemoveTodoIDs removes the "todo" edge to Todo entities by IDs.
func (suo *ScoresUpdateOne) RemoveTodoIDs(ids ...int) *ScoresUpdateOne {
	suo.mutation.RemoveTodoIDs(ids...)
	return suo
}

// RemoveTodo removes "todo" edges to Todo entities.
func (suo *ScoresUpdateOne) RemoveTodo(t ...*Todo) *ScoresUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTodoIDs(ids...)
}

// ClearScoresV1 clears the "ScoresV1" edge to the ScoresV1 entity.
func (suo *ScoresUpdateOne) ClearScoresV1() *ScoresUpdateOne {
	suo.mutation.ClearScoresV1()
	return suo
}

// ClearScoresV2 clears the "ScoresV2" edge to the ScoresV2 entity.
func (suo *ScoresUpdateOne) ClearScoresV2() *ScoresUpdateOne {
	suo.mutation.ClearScoresV2()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScoresUpdateOne) Select(field string, fields ...string) *ScoresUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Scores entity.
func (suo *ScoresUpdateOne) Save(ctx context.Context) (*Scores, error) {
	return withHooks[*Scores, ScoresMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScoresUpdateOne) SaveX(ctx context.Context) *Scores {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScoresUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScoresUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ScoresUpdateOne) sqlSave(ctx context.Context) (_node *Scores, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scores.Table,
			Columns: scores.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scores.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Scores.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scores.FieldID)
		for _, f := range fields {
			if !scores.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scores.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if suo.mutation.TodoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scores.TodoTable,
			Columns: []string{scores.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: todo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTodoIDs(); len(nodes) > 0 && !suo.mutation.TodoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scores.TodoTable,
			Columns: []string{scores.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: todo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TodoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scores.TodoTable,
			Columns: []string{scores.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: todo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ScoresV1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scores.ScoresV1Table,
			Columns: []string{scores.ScoresV1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scoresv1.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ScoresV1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scores.ScoresV1Table,
			Columns: []string{scores.ScoresV1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scoresv1.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ScoresV2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scores.ScoresV2Table,
			Columns: []string{scores.ScoresV2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scoresv2.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ScoresV2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scores.ScoresV2Table,
			Columns: []string{scores.ScoresV2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scoresv2.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Scores{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scores.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
