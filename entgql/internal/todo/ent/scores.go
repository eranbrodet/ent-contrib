// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/contrib/entgql/internal/todo/ent/scores"
	"entgo.io/contrib/entgql/internal/todo/ent/scoresv1"
	"entgo.io/contrib/entgql/internal/todo/ent/scoresv2"
	"entgo.io/ent/dialect/sql"
)

// Scores is the model entity for the Scores schema.
type Scores struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScoresQuery when eager-loading is set.
	Edges            ScoresEdges `json:"edges"`
	scores_v1_scores *int
	scores_v2_scores *int
}

// ScoresEdges holds the relations/edges for other nodes in the graph.
type ScoresEdges struct {
	// Todo holds the value of the todo edge.
	Todo []*Todo `json:"todo,omitempty"`
	// ScoresV1 holds the value of the ScoresV1 edge.
	ScoresV1 *ScoresV1 `json:"ScoresV1,omitempty"`
	// ScoresV2 holds the value of the ScoresV2 edge.
	ScoresV2 *ScoresV2 `json:"ScoresV2,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedTodo map[string][]*Todo
}

// TodoOrErr returns the Todo value or an error if the edge
// was not loaded in eager-loading.
func (e ScoresEdges) TodoOrErr() ([]*Todo, error) {
	if e.loadedTypes[0] {
		return e.Todo, nil
	}
	return nil, &NotLoadedError{edge: "todo"}
}

// ScoresV1OrErr returns the ScoresV1 value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScoresEdges) ScoresV1OrErr() (*ScoresV1, error) {
	if e.loadedTypes[1] {
		if e.ScoresV1 == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: scoresv1.Label}
		}
		return e.ScoresV1, nil
	}
	return nil, &NotLoadedError{edge: "ScoresV1"}
}

// ScoresV2OrErr returns the ScoresV2 value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScoresEdges) ScoresV2OrErr() (*ScoresV2, error) {
	if e.loadedTypes[2] {
		if e.ScoresV2 == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: scoresv2.Label}
		}
		return e.ScoresV2, nil
	}
	return nil, &NotLoadedError{edge: "ScoresV2"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Scores) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scores.FieldID:
			values[i] = new(sql.NullInt64)
		case scores.ForeignKeys[0]: // scores_v1_scores
			values[i] = new(sql.NullInt64)
		case scores.ForeignKeys[1]: // scores_v2_scores
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Scores", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Scores fields.
func (s *Scores) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scores.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case scores.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field scores_v1_scores", value)
			} else if value.Valid {
				s.scores_v1_scores = new(int)
				*s.scores_v1_scores = int(value.Int64)
			}
		case scores.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field scores_v2_scores", value)
			} else if value.Valid {
				s.scores_v2_scores = new(int)
				*s.scores_v2_scores = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTodo queries the "todo" edge of the Scores entity.
func (s *Scores) QueryTodo() *TodoQuery {
	return NewScoresClient(s.config).QueryTodo(s)
}

// QueryScoresV1 queries the "ScoresV1" edge of the Scores entity.
func (s *Scores) QueryScoresV1() *ScoresV1Query {
	return NewScoresClient(s.config).QueryScoresV1(s)
}

// QueryScoresV2 queries the "ScoresV2" edge of the Scores entity.
func (s *Scores) QueryScoresV2() *ScoresV2Query {
	return NewScoresClient(s.config).QueryScoresV2(s)
}

// Update returns a builder for updating this Scores.
// Note that you need to call Scores.Unwrap() before calling this method if this Scores
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Scores) Update() *ScoresUpdateOne {
	return NewScoresClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Scores entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Scores) Unwrap() *Scores {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Scores is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Scores) String() string {
	var builder strings.Builder
	builder.WriteString("Scores(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTodo returns the Todo named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Scores) NamedTodo(name string) ([]*Todo, error) {
	if s.Edges.namedTodo == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedTodo[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Scores) appendNamedTodo(name string, edges ...*Todo) {
	if s.Edges.namedTodo == nil {
		s.Edges.namedTodo = make(map[string][]*Todo)
	}
	if len(edges) == 0 {
		s.Edges.namedTodo[name] = []*Todo{}
	} else {
		s.Edges.namedTodo[name] = append(s.Edges.namedTodo[name], edges...)
	}
}

// ScoresSlice is a parsable slice of Scores.
type ScoresSlice []*Scores

func (s ScoresSlice) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
