// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/contrib/entgql/internal/todo/ent/predicate"
	"entgo.io/contrib/entgql/internal/todo/ent/scores"
	"entgo.io/contrib/entgql/internal/todo/ent/scoresv1"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScoresV1Query is the builder for querying ScoresV1 entities.
type ScoresV1Query struct {
	config
	ctx             *QueryContext
	order           []OrderFunc
	inters          []Interceptor
	predicates      []predicate.ScoresV1
	withScores      *ScoresQuery
	modifiers       []func(*sql.Selector)
	loadTotal       []func(context.Context, []*ScoresV1) error
	withNamedScores map[string]*ScoresQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ScoresV1Query builder.
func (sv *ScoresV1Query) Where(ps ...predicate.ScoresV1) *ScoresV1Query {
	sv.predicates = append(sv.predicates, ps...)
	return sv
}

// Limit the number of records to be returned by this query.
func (sv *ScoresV1Query) Limit(limit int) *ScoresV1Query {
	sv.ctx.Limit = &limit
	return sv
}

// Offset to start from.
func (sv *ScoresV1Query) Offset(offset int) *ScoresV1Query {
	sv.ctx.Offset = &offset
	return sv
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sv *ScoresV1Query) Unique(unique bool) *ScoresV1Query {
	sv.ctx.Unique = &unique
	return sv
}

// Order specifies how the records should be ordered.
func (sv *ScoresV1Query) Order(o ...OrderFunc) *ScoresV1Query {
	sv.order = append(sv.order, o...)
	return sv
}

// QueryScores chains the current query on the "Scores" edge.
func (sv *ScoresV1Query) QueryScores() *ScoresQuery {
	query := (&ScoresClient{config: sv.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sv.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sv.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scoresv1.Table, scoresv1.FieldID, selector),
			sqlgraph.To(scores.Table, scores.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scoresv1.ScoresTable, scoresv1.ScoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(sv.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ScoresV1 entity from the query.
// Returns a *NotFoundError when no ScoresV1 was found.
func (sv *ScoresV1Query) First(ctx context.Context) (*ScoresV1, error) {
	nodes, err := sv.Limit(1).All(setContextOp(ctx, sv.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{scoresv1.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sv *ScoresV1Query) FirstX(ctx context.Context) *ScoresV1 {
	node, err := sv.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ScoresV1 ID from the query.
// Returns a *NotFoundError when no ScoresV1 ID was found.
func (sv *ScoresV1Query) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sv.Limit(1).IDs(setContextOp(ctx, sv.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{scoresv1.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sv *ScoresV1Query) FirstIDX(ctx context.Context) int {
	id, err := sv.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ScoresV1 entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ScoresV1 entity is found.
// Returns a *NotFoundError when no ScoresV1 entities are found.
func (sv *ScoresV1Query) Only(ctx context.Context) (*ScoresV1, error) {
	nodes, err := sv.Limit(2).All(setContextOp(ctx, sv.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{scoresv1.Label}
	default:
		return nil, &NotSingularError{scoresv1.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sv *ScoresV1Query) OnlyX(ctx context.Context) *ScoresV1 {
	node, err := sv.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ScoresV1 ID in the query.
// Returns a *NotSingularError when more than one ScoresV1 ID is found.
// Returns a *NotFoundError when no entities are found.
func (sv *ScoresV1Query) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sv.Limit(2).IDs(setContextOp(ctx, sv.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{scoresv1.Label}
	default:
		err = &NotSingularError{scoresv1.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sv *ScoresV1Query) OnlyIDX(ctx context.Context) int {
	id, err := sv.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ScoresV1s.
func (sv *ScoresV1Query) All(ctx context.Context) ([]*ScoresV1, error) {
	ctx = setContextOp(ctx, sv.ctx, "All")
	if err := sv.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ScoresV1, *ScoresV1Query]()
	return withInterceptors[[]*ScoresV1](ctx, sv, qr, sv.inters)
}

// AllX is like All, but panics if an error occurs.
func (sv *ScoresV1Query) AllX(ctx context.Context) []*ScoresV1 {
	nodes, err := sv.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ScoresV1 IDs.
func (sv *ScoresV1Query) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = setContextOp(ctx, sv.ctx, "IDs")
	if err := sv.Select(scoresv1.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sv *ScoresV1Query) IDsX(ctx context.Context) []int {
	ids, err := sv.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sv *ScoresV1Query) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sv.ctx, "Count")
	if err := sv.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sv, querierCount[*ScoresV1Query](), sv.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sv *ScoresV1Query) CountX(ctx context.Context) int {
	count, err := sv.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sv *ScoresV1Query) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sv.ctx, "Exist")
	switch _, err := sv.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sv *ScoresV1Query) ExistX(ctx context.Context) bool {
	exist, err := sv.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ScoresV1Query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sv *ScoresV1Query) Clone() *ScoresV1Query {
	if sv == nil {
		return nil
	}
	return &ScoresV1Query{
		config:     sv.config,
		ctx:        sv.ctx.Clone(),
		order:      append([]OrderFunc{}, sv.order...),
		inters:     append([]Interceptor{}, sv.inters...),
		predicates: append([]predicate.ScoresV1{}, sv.predicates...),
		withScores: sv.withScores.Clone(),
		// clone intermediate query.
		sql:  sv.sql.Clone(),
		path: sv.path,
	}
}

// WithScores tells the query-builder to eager-load the nodes that are connected to
// the "Scores" edge. The optional arguments are used to configure the query builder of the edge.
func (sv *ScoresV1Query) WithScores(opts ...func(*ScoresQuery)) *ScoresV1Query {
	query := (&ScoresClient{config: sv.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sv.withScores = query
	return sv
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Score int `json:"score,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ScoresV1.Query().
//		GroupBy(scoresv1.FieldScore).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sv *ScoresV1Query) GroupBy(field string, fields ...string) *ScoresV1GroupBy {
	sv.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ScoresV1GroupBy{build: sv}
	grbuild.flds = &sv.ctx.Fields
	grbuild.label = scoresv1.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Score int `json:"score,omitempty"`
//	}
//
//	client.ScoresV1.Query().
//		Select(scoresv1.FieldScore).
//		Scan(ctx, &v)
func (sv *ScoresV1Query) Select(fields ...string) *ScoresV1Select {
	sv.ctx.Fields = append(sv.ctx.Fields, fields...)
	sbuild := &ScoresV1Select{ScoresV1Query: sv}
	sbuild.label = scoresv1.Label
	sbuild.flds, sbuild.scan = &sv.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ScoresV1Select configured with the given aggregations.
func (sv *ScoresV1Query) Aggregate(fns ...AggregateFunc) *ScoresV1Select {
	return sv.Select().Aggregate(fns...)
}

func (sv *ScoresV1Query) prepareQuery(ctx context.Context) error {
	for _, inter := range sv.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sv); err != nil {
				return err
			}
		}
	}
	for _, f := range sv.ctx.Fields {
		if !scoresv1.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sv.path != nil {
		prev, err := sv.path(ctx)
		if err != nil {
			return err
		}
		sv.sql = prev
	}
	return nil
}

func (sv *ScoresV1Query) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ScoresV1, error) {
	var (
		nodes       = []*ScoresV1{}
		_spec       = sv.querySpec()
		loadedTypes = [1]bool{
			sv.withScores != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ScoresV1).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ScoresV1{config: sv.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sv.modifiers) > 0 {
		_spec.Modifiers = sv.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sv.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sv.withScores; query != nil {
		if err := sv.loadScores(ctx, query, nodes,
			func(n *ScoresV1) { n.Edges.Scores = []*Scores{} },
			func(n *ScoresV1, e *Scores) { n.Edges.Scores = append(n.Edges.Scores, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sv.withNamedScores {
		if err := sv.loadScores(ctx, query, nodes,
			func(n *ScoresV1) { n.appendNamedScores(name) },
			func(n *ScoresV1, e *Scores) { n.appendNamedScores(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range sv.loadTotal {
		if err := sv.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sv *ScoresV1Query) loadScores(ctx context.Context, query *ScoresQuery, nodes []*ScoresV1, init func(*ScoresV1), assign func(*ScoresV1, *Scores)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ScoresV1)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Scores(func(s *sql.Selector) {
		s.Where(sql.InValues(scoresv1.ScoresColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.scores_v1_scores
		if fk == nil {
			return fmt.Errorf(`foreign-key "scores_v1_scores" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "scores_v1_scores" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (sv *ScoresV1Query) sqlCount(ctx context.Context) (int, error) {
	_spec := sv.querySpec()
	if len(sv.modifiers) > 0 {
		_spec.Modifiers = sv.modifiers
	}
	_spec.Node.Columns = sv.ctx.Fields
	if len(sv.ctx.Fields) > 0 {
		_spec.Unique = sv.ctx.Unique != nil && *sv.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sv.driver, _spec)
}

func (sv *ScoresV1Query) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scoresv1.Table,
			Columns: scoresv1.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scoresv1.FieldID,
			},
		},
		From:   sv.sql,
		Unique: true,
	}
	if unique := sv.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sv.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scoresv1.FieldID)
		for i := range fields {
			if fields[i] != scoresv1.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sv.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sv.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sv.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sv.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sv *ScoresV1Query) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sv.driver.Dialect())
	t1 := builder.Table(scoresv1.Table)
	columns := sv.ctx.Fields
	if len(columns) == 0 {
		columns = scoresv1.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sv.sql != nil {
		selector = sv.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sv.ctx.Unique != nil && *sv.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sv.predicates {
		p(selector)
	}
	for _, p := range sv.order {
		p(selector)
	}
	if offset := sv.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sv.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedScores tells the query-builder to eager-load the nodes that are connected to the "Scores"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sv *ScoresV1Query) WithNamedScores(name string, opts ...func(*ScoresQuery)) *ScoresV1Query {
	query := (&ScoresClient{config: sv.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sv.withNamedScores == nil {
		sv.withNamedScores = make(map[string]*ScoresQuery)
	}
	sv.withNamedScores[name] = query
	return sv
}

// ScoresV1GroupBy is the group-by builder for ScoresV1 entities.
type ScoresV1GroupBy struct {
	selector
	build *ScoresV1Query
}

// Aggregate adds the given aggregation functions to the group-by query.
func (svb *ScoresV1GroupBy) Aggregate(fns ...AggregateFunc) *ScoresV1GroupBy {
	svb.fns = append(svb.fns, fns...)
	return svb
}

// Scan applies the selector query and scans the result into the given value.
func (svb *ScoresV1GroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, svb.build.ctx, "GroupBy")
	if err := svb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScoresV1Query, *ScoresV1GroupBy](ctx, svb.build, svb, svb.build.inters, v)
}

func (svb *ScoresV1GroupBy) sqlScan(ctx context.Context, root *ScoresV1Query, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(svb.fns))
	for _, fn := range svb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*svb.flds)+len(svb.fns))
		for _, f := range *svb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*svb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := svb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ScoresV1Select is the builder for selecting fields of ScoresV1 entities.
type ScoresV1Select struct {
	*ScoresV1Query
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sv *ScoresV1Select) Aggregate(fns ...AggregateFunc) *ScoresV1Select {
	sv.fns = append(sv.fns, fns...)
	return sv
}

// Scan applies the selector query and scans the result into the given value.
func (sv *ScoresV1Select) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sv.ctx, "Select")
	if err := sv.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScoresV1Query, *ScoresV1Select](ctx, sv.ScoresV1Query, sv, sv.inters, v)
}

func (sv *ScoresV1Select) sqlScan(ctx context.Context, root *ScoresV1Query, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sv.fns))
	for _, fn := range sv.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sv.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sv.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
