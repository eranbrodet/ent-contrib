// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/contrib/entgql/internal/todo/ent/predicate"
	"entgo.io/contrib/entgql/internal/todo/ent/scores"
	"entgo.io/contrib/entgql/internal/todo/ent/scoresv2"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScoresV2Update is the builder for updating ScoresV2 entities.
type ScoresV2Update struct {
	config
	hooks    []Hook
	mutation *ScoresV2Mutation
}

// Where appends a list predicates to the ScoresV2Update builder.
func (sv *ScoresV2Update) Where(ps ...predicate.ScoresV2) *ScoresV2Update {
	sv.mutation.Where(ps...)
	return sv
}

// SetScore sets the "score" field.
func (sv *ScoresV2Update) SetScore(i int) *ScoresV2Update {
	sv.mutation.ResetScore()
	sv.mutation.SetScore(i)
	return sv
}

// AddScore adds i to the "score" field.
func (sv *ScoresV2Update) AddScore(i int) *ScoresV2Update {
	sv.mutation.AddScore(i)
	return sv
}

// AddScoreIDs adds the "Scores" edge to the Scores entity by IDs.
func (sv *ScoresV2Update) AddScoreIDs(ids ...int) *ScoresV2Update {
	sv.mutation.AddScoreIDs(ids...)
	return sv
}

// AddScores adds the "Scores" edges to the Scores entity.
func (sv *ScoresV2Update) AddScores(s ...*Scores) *ScoresV2Update {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sv.AddScoreIDs(ids...)
}

// Mutation returns the ScoresV2Mutation object of the builder.
func (sv *ScoresV2Update) Mutation() *ScoresV2Mutation {
	return sv.mutation
}

// ClearScores clears all "Scores" edges to the Scores entity.
func (sv *ScoresV2Update) ClearScores() *ScoresV2Update {
	sv.mutation.ClearScores()
	return sv
}

// RemoveScoreIDs removes the "Scores" edge to Scores entities by IDs.
func (sv *ScoresV2Update) RemoveScoreIDs(ids ...int) *ScoresV2Update {
	sv.mutation.RemoveScoreIDs(ids...)
	return sv
}

// RemoveScores removes "Scores" edges to Scores entities.
func (sv *ScoresV2Update) RemoveScores(s ...*Scores) *ScoresV2Update {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sv.RemoveScoreIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sv *ScoresV2Update) Save(ctx context.Context) (int, error) {
	return withHooks[int, ScoresV2Mutation](ctx, sv.sqlSave, sv.mutation, sv.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sv *ScoresV2Update) SaveX(ctx context.Context) int {
	affected, err := sv.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sv *ScoresV2Update) Exec(ctx context.Context) error {
	_, err := sv.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sv *ScoresV2Update) ExecX(ctx context.Context) {
	if err := sv.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sv *ScoresV2Update) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scoresv2.Table,
			Columns: scoresv2.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scoresv2.FieldID,
			},
		},
	}
	if ps := sv.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sv.mutation.Score(); ok {
		_spec.SetField(scoresv2.FieldScore, field.TypeInt, value)
	}
	if value, ok := sv.mutation.AddedScore(); ok {
		_spec.AddField(scoresv2.FieldScore, field.TypeInt, value)
	}
	if sv.mutation.ScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scoresv2.ScoresTable,
			Columns: []string{scoresv2.ScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scores.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sv.mutation.RemovedScoresIDs(); len(nodes) > 0 && !sv.mutation.ScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scoresv2.ScoresTable,
			Columns: []string{scoresv2.ScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scores.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sv.mutation.ScoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scoresv2.ScoresTable,
			Columns: []string{scoresv2.ScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scores.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sv.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scoresv2.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sv.mutation.done = true
	return n, nil
}

// ScoresV2UpdateOne is the builder for updating a single ScoresV2 entity.
type ScoresV2UpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScoresV2Mutation
}

// SetScore sets the "score" field.
func (svo *ScoresV2UpdateOne) SetScore(i int) *ScoresV2UpdateOne {
	svo.mutation.ResetScore()
	svo.mutation.SetScore(i)
	return svo
}

// AddScore adds i to the "score" field.
func (svo *ScoresV2UpdateOne) AddScore(i int) *ScoresV2UpdateOne {
	svo.mutation.AddScore(i)
	return svo
}

// AddScoreIDs adds the "Scores" edge to the Scores entity by IDs.
func (svo *ScoresV2UpdateOne) AddScoreIDs(ids ...int) *ScoresV2UpdateOne {
	svo.mutation.AddScoreIDs(ids...)
	return svo
}

// AddScores adds the "Scores" edges to the Scores entity.
func (svo *ScoresV2UpdateOne) AddScores(s ...*Scores) *ScoresV2UpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return svo.AddScoreIDs(ids...)
}

// Mutation returns the ScoresV2Mutation object of the builder.
func (svo *ScoresV2UpdateOne) Mutation() *ScoresV2Mutation {
	return svo.mutation
}

// ClearScores clears all "Scores" edges to the Scores entity.
func (svo *ScoresV2UpdateOne) ClearScores() *ScoresV2UpdateOne {
	svo.mutation.ClearScores()
	return svo
}

// RemoveScoreIDs removes the "Scores" edge to Scores entities by IDs.
func (svo *ScoresV2UpdateOne) RemoveScoreIDs(ids ...int) *ScoresV2UpdateOne {
	svo.mutation.RemoveScoreIDs(ids...)
	return svo
}

// RemoveScores removes "Scores" edges to Scores entities.
func (svo *ScoresV2UpdateOne) RemoveScores(s ...*Scores) *ScoresV2UpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return svo.RemoveScoreIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svo *ScoresV2UpdateOne) Select(field string, fields ...string) *ScoresV2UpdateOne {
	svo.fields = append([]string{field}, fields...)
	return svo
}

// Save executes the query and returns the updated ScoresV2 entity.
func (svo *ScoresV2UpdateOne) Save(ctx context.Context) (*ScoresV2, error) {
	return withHooks[*ScoresV2, ScoresV2Mutation](ctx, svo.sqlSave, svo.mutation, svo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svo *ScoresV2UpdateOne) SaveX(ctx context.Context) *ScoresV2 {
	node, err := svo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svo *ScoresV2UpdateOne) Exec(ctx context.Context) error {
	_, err := svo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svo *ScoresV2UpdateOne) ExecX(ctx context.Context) {
	if err := svo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (svo *ScoresV2UpdateOne) sqlSave(ctx context.Context) (_node *ScoresV2, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scoresv2.Table,
			Columns: scoresv2.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scoresv2.FieldID,
			},
		},
	}
	id, ok := svo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScoresV2.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := svo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scoresv2.FieldID)
		for _, f := range fields {
			if !scoresv2.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scoresv2.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svo.mutation.Score(); ok {
		_spec.SetField(scoresv2.FieldScore, field.TypeInt, value)
	}
	if value, ok := svo.mutation.AddedScore(); ok {
		_spec.AddField(scoresv2.FieldScore, field.TypeInt, value)
	}
	if svo.mutation.ScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scoresv2.ScoresTable,
			Columns: []string{scoresv2.ScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scores.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svo.mutation.RemovedScoresIDs(); len(nodes) > 0 && !svo.mutation.ScoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scoresv2.ScoresTable,
			Columns: []string{scoresv2.ScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scores.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svo.mutation.ScoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scoresv2.ScoresTable,
			Columns: []string{scoresv2.ScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scores.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScoresV2{config: svo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scoresv2.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	svo.mutation.done = true
	return _node, nil
}
