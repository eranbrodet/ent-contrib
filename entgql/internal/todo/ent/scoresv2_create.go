// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/contrib/entgql/internal/todo/ent/scores"
	"entgo.io/contrib/entgql/internal/todo/ent/scoresv2"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScoresV2Create is the builder for creating a ScoresV2 entity.
type ScoresV2Create struct {
	config
	mutation *ScoresV2Mutation
	hooks    []Hook
}

// SetScore sets the "score" field.
func (sv *ScoresV2Create) SetScore(i int) *ScoresV2Create {
	sv.mutation.SetScore(i)
	return sv
}

// AddScoreIDs adds the "Scores" edge to the Scores entity by IDs.
func (sv *ScoresV2Create) AddScoreIDs(ids ...int) *ScoresV2Create {
	sv.mutation.AddScoreIDs(ids...)
	return sv
}

// AddScores adds the "Scores" edges to the Scores entity.
func (sv *ScoresV2Create) AddScores(s ...*Scores) *ScoresV2Create {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sv.AddScoreIDs(ids...)
}

// Mutation returns the ScoresV2Mutation object of the builder.
func (sv *ScoresV2Create) Mutation() *ScoresV2Mutation {
	return sv.mutation
}

// Save creates the ScoresV2 in the database.
func (sv *ScoresV2Create) Save(ctx context.Context) (*ScoresV2, error) {
	return withHooks[*ScoresV2, ScoresV2Mutation](ctx, sv.sqlSave, sv.mutation, sv.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sv *ScoresV2Create) SaveX(ctx context.Context) *ScoresV2 {
	v, err := sv.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sv *ScoresV2Create) Exec(ctx context.Context) error {
	_, err := sv.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sv *ScoresV2Create) ExecX(ctx context.Context) {
	if err := sv.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sv *ScoresV2Create) check() error {
	if _, ok := sv.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "ScoresV2.score"`)}
	}
	if len(sv.mutation.ScoresIDs()) == 0 {
		return &ValidationError{Name: "Scores", err: errors.New(`ent: missing required edge "ScoresV2.Scores"`)}
	}
	return nil
}

func (sv *ScoresV2Create) sqlSave(ctx context.Context) (*ScoresV2, error) {
	if err := sv.check(); err != nil {
		return nil, err
	}
	_node, _spec := sv.createSpec()
	if err := sqlgraph.CreateNode(ctx, sv.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sv.mutation.id = &_node.ID
	sv.mutation.done = true
	return _node, nil
}

func (sv *ScoresV2Create) createSpec() (*ScoresV2, *sqlgraph.CreateSpec) {
	var (
		_node = &ScoresV2{config: sv.config}
		_spec = &sqlgraph.CreateSpec{
			Table: scoresv2.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scoresv2.FieldID,
			},
		}
	)
	if value, ok := sv.mutation.Score(); ok {
		_spec.SetField(scoresv2.FieldScore, field.TypeInt, value)
		_node.Score = value
	}
	if nodes := sv.mutation.ScoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scoresv2.ScoresTable,
			Columns: []string{scoresv2.ScoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scores.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScoresV2CreateBulk is the builder for creating many ScoresV2 entities in bulk.
type ScoresV2CreateBulk struct {
	config
	builders []*ScoresV2Create
}

// Save creates the ScoresV2 entities in the database.
func (svb *ScoresV2CreateBulk) Save(ctx context.Context) ([]*ScoresV2, error) {
	specs := make([]*sqlgraph.CreateSpec, len(svb.builders))
	nodes := make([]*ScoresV2, len(svb.builders))
	mutators := make([]Mutator, len(svb.builders))
	for i := range svb.builders {
		func(i int, root context.Context) {
			builder := svb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScoresV2Mutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, svb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, svb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, svb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (svb *ScoresV2CreateBulk) SaveX(ctx context.Context) []*ScoresV2 {
	v, err := svb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svb *ScoresV2CreateBulk) Exec(ctx context.Context) error {
	_, err := svb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svb *ScoresV2CreateBulk) ExecX(ctx context.Context) {
	if err := svb.Exec(ctx); err != nil {
		panic(err)
	}
}
